Xpath Locaters

	What is Xpath

		Xpath is defined as xml path. it is a syntax or language for finding any element on the web page using xml path expression. Xpath is used to find the location of any element on a webpage using HTML Dom structure

		cliff notes:

			1.) Xpath stands for xml path language

			2.) Xpath uses "path like" syntax to identify and navigate nodes in an xml document

			3.) Xpath contains over 200 built in functions

			4.) XPath is a major element in the XSLT standard

			5.) XPath is a W3C recommendation 

		RULES:

				Index:

					Xpath indexes are not like Java indexes, 1 is the first index, not 0.

		Types of Xpath:

			Absolute Xpath (AKA full Xpath)

				never used in automation because it's not reliable 

				Absolute Xpath always starts with the root element, in the case of an Html document it would be /html

				Absolute Xpath ALWAYS starts with a single forward slash

				to get the Absolute Xpath you must give the address of the element from the top all the way to the bottom 

				square brackets [] are used to indicate which tag you are referring to when there are more than one example of a tag. THIS IS NOT IN INDEX FORMAT 1 IS THE FIRST, 2 IS THE SECOND AND SO ON...

				Example:

					/html/body/div/div[2]/div/div/button[2]

			Relative Xpath

				ForRelative XPath,the path starts from the middle of the HTML DOM structure. It begins with the double forward slash (//), which means it can search for elements anywhere within the webpage.

				Anatomy:

					Example Relative Xpath:

						//tagName[@attribute=â€˜value']

					//
						beginning of element

					tagName
						tag name of element

					@
						indicates that you will be selecting an attribute

					Attribute
						Attribute name of the element

					Value
						Value of attribute 

				Navigating Back:

					In Xpath you can navigate to the tag ABOVE the tag you 

				Finding element:

					By Attribute:

						Template example:

							//tagNameHere[@attributeHere='attributeValueHere']

						Real examples:

							//button[@onClick='button1()']

					By Text:

						Template Example:

							//tagNameHere[text()='some text here']

						Real example:

							//button[text()='Click for JS Prompt']

					Without Tag:

						basically, just use * where the tag would normally be

						Examples:


							//*[@attributeHere='attributeValueHere'] 

							//*[text()='some text here']

					Xpath modifiers:

						These keywords help you locate your element in specific ways.

							starts with:

								used to find an element based on the START of an attribute or text

								example:

									//tag[starts-with(@attribute,'button_')]

									//tag[starts-with(text,'text goes he')]

							Contains:

								used to find element that partially contains the attribute value or text value

								Example:

									//tag[contains(@attribute,'value')]

									//tag[contains(text, 'goes')]

							And:

								If you want the element you're locating to have ALL of the attributes or text in your Xpath

									Example:

										//button[@type='submit' and @id='wooden_spoon']

							Or:

								If you want the element you're locating to have ONE of the attributes or text in your Xpath

									Example:

										//button[@type='submit' or @id='wooden_spoon']


					Parents and Siblings:

						Parents:

							Parents in Html and xml are defined as the tags that CONTAIN the child tag

								Example:

									<parent>
										<child>
										</child>
									</parent>

							To access the Parent element of your Xpath element you need to follow your Xpath text with double forward slashes (//) followed by additional defining text.

								Example:

									//label[text()='Username']//parent::tagHere

							Parent Commands:

								//parent::tagHere

									The Parent command following an Xpath indicates to the code that you will be looking to the Element(s) above the Xpath element. You can go up as many levels as you would like.

										Example:

											Parent:

												//label[text()='Username']//parent::tagHere

											"grandParent" (parent of parent):

												//label[text()='Username']//parent::tagOneHere//parent::tagTwoHere



						Siblings:

							Siblings in Html and xml are defined as more than one element that are contained within the same element.

								Example:

									<parent>
										<sibling_1>
										</sibling_1>

										<sibling_2>
										</sibling_2>
									</parent>

							To access the Sibling element of your Xpath element you need to follow your Xpath text with a single forward slash (/) followed by additional defining text.

								Example:

									//label[text()='First name']/following-sibling::div

							Sibling Commands:


								/following-sibling::tagHere

									gets the tag sibling that is located under the Xpath location

									Example:

										//label[text()='First name']/following-sibling::div

								/preceding-sibling::tagHere

									gets the tag sibling located ABOVE the Xpath location



				Example:

					//input[@id='btn']